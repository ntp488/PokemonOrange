<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize server object
var type = network_socket_tcp
var port = netScript_Client_SetPort()
max_clients = 32
server = network_create_server(type, port, max_clients)
socket = ds_list_create()
displayInfo = false
global.pause = false
sprite = ""

if (server &lt; 0) {
    show_message("Failed to create the server!")
    game_restart()
}
else {
    room_goto(playerSelection)
}

var size = 1024
var bufferType = buffer_grow
var alignment = 1
buffer = buffer_create(size, type, alignment)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check for key to display Info
if (keyboard_check_released(vk_f1)) {
    if (self.displayInfo) {
        self.displayInfo = false
    } else {
        self.displayInfo = true
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create a click and send to client
instance_create(mouse_x, mouse_y, clickObj)
buffer_seek(buffer, buffer_seek_start, 0)

buffer_write(buffer, buffer_u8, 1)
buffer_write(buffer, buffer_u32, mouse_x)
buffer_write(buffer, buffer_u32, mouse_y)

network_send_packet(socket, buffer, buffer_tell(buffer))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for clients and data
var type_event = async_load[? "type"]
switch type_event {
    case network_type_connect:
        //add client to socket variable - or a list for multiple clients
        /*
        if (socket == noone) {
            socket = async_load[? "socket"]
            break
        }
        */
        var sock = ds_map_find_value(async_load, "socket")
        ds_list_add(socket, sock)
        global.newplayer = instance_create(0, 0, playerOther)
        global.newplayer.playerID = ds_map_find_value(async_load, "id")
        break
    case network_type_disconnect:
        //remove the client from the socket variable
        /*socket = noone
        scr_text_CommunicationConfirmation( "A player has disconnected from the game.", 1, playerObj.x, playerObj.y + 240)
        break
        */
        var sock = ds_map_find_value(async_load, "socket");
        ds_map_delete(socket, sock)
        break
    case network_type_data:
        //handle the data
        var buff = async_load[? "buffer"]
        buffer_seek(buff, buffer_seek_start, 0)
        netScript_ReceivedPacket(buff, ds_map_find_value(async_load, "socket"))
        break
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy server and socket list
ds_list_destroy(socket)
network_destroy(server)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy playerObj.inventoryMap
ds_map_destroy(playerObj.inventoryMap)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_left)
draw_set_font(steelfishoutline20)
draw_set_color(c_black)
if (self.displayInfo) {
    draw_text(view_xview[0], view_yview[0], ("Instances of playerOther: " + string(instance_number(playerOther))))
    draw_text(view_xview[0], view_yview[0] + 25, ("Instances of serverObj: " + string(instance_number(serverObj))))
    draw_text(view_xview[0], view_yview[0] + 50, ("Instances of clientObj: " + string(instance_number(clientObj))))
    draw_text(view_xview[0], view_yview[0] + 75, ("Instances of clientObj: " + string(instance_number(obj_text))))
    draw_text(view_xview[0], view_yview[0] + 100, ("Current FPS: " + string(fps)))
    draw_text(view_xview[0], view_yview[0] + 125, ("Frame Loss: " + string(room_speed - fps)))
    if (instance_exists(playerOther)) {
    draw_text(view_xview[0], view_yview[0] + 150, playerOther.animationHolder)
    }
    draw_text(view_xview[0], view_yview[0] + 175, ("otherPlayerPokemon Length: " + string(array_length_1d(playerObj.otherPlayerPokemon))))
    draw_text(view_xview[0], view_yview[0] + 200, ("Number of connections: " + string(ds_list_size(self.socket))))
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
