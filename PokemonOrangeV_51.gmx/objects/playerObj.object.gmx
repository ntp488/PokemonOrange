<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>direction = 270

//setting the player sprite
if (instance_exists(serverObj)) {
    self.chosenSprite = string(serverObj.sprite)
} else {
    self.chosenSprite = string(clientObj.sprite)
}

//player movement states
running = false
standing = true

//other...
playerSpeed = 3
depth = -150
image_speed = .2
otherPlayerPokemon = 0
getPokemonNames = false

//setting sprite based on chosenSprite
sprite_index = asset_get_index(self.chosenSprite + "Down")
animation = string(sprite_get_name(sprite_index))

//initializing chatBox object
instance_create(self.x - 256, self.y + 240, chatBox)

//p2p communication flags
challenged = false
trequest = false

//-----------------------storage mechanisms------------------------------
inventoryMap = ds_map_create()

//script for loading inventoryMap
scr_loadInventory()
//script for initializing pokemonArray
pokemonArray = scr_loadPokemon()
numOfPokemon = array_height_2d(pokemonArray) // - 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///-------------------------Controls----------------------------
//-------------------------Movement Controls---------------------------
if !(global.pause) {//check for pause

//check for standing
if (keyboard_check(vk_nokey)) or (instance_exists(igMenuObj)) {
    self.standing = true
    self.speed = 0
}
else {
    self.standing = false
}

//check for running
if (keyboard_check_direct(vk_lshift)) {
    self.running = true
}
else {
    self.running = false
}

//if running is false, set player to walk
if !(self.running) {
    if (keyboard_check(vk_right)) {
        self.direction = 0
        self.speed = self.playerSpeed
    }
    else if (keyboard_check(vk_up)) {
        self.direction = 90
        self.speed = self.playerSpeed
    }
    else if (keyboard_check(vk_left)) {
        self.direction = 180
        self.speed = self.playerSpeed
    }
    else if (keyboard_check(vk_down)) {
        self.direction = 270
        self.speed = self.playerSpeed
    }
}

//if running is true, set player to run
if (self.running) {
    if (keyboard_check(vk_right)) {
        self.direction = 0
        self.speed = self.playerSpeed * 2
    }
    else if (keyboard_check(vk_up)) {
        self.direction = 90
        self.speed = self.playerSpeed * 2
    }
    else if (keyboard_check(vk_left)) {
        self.direction = 180
        self.speed = self.playerSpeed * 2
    }
    else if (keyboard_check(vk_down)) {
        self.direction = 270
        self.speed = self.playerSpeed * 2
    }
}
}// end if for pause
else{
    self.speed = 0
    self.running = false
    self.standing = true
}

//----------------------Set sprite_index-----------------------

//player is standing still
if (self.standing) {
    if (self.direction == 0) {
        if !(self.sprite_index == asset_get_index(self.chosenSprite + "Right")) {
            self.sprite_index = asset_get_index(self.chosenSprite + "Right")
        }
    }
    else if (self.direction == 90) {
        if !(self.sprite_index == asset_get_index(self.chosenSprite + "Up")) {
            self.sprite_index = asset_get_index(self.chosenSprite + "Up")
        }
    }
    else if (self.direction == 180) {
        if !(self.sprite_index == asset_get_index(self.chosenSprite + "Left")) {
            self.sprite_index = asset_get_index(self.chosenSprite + "Left")
        }
    }
    else if (self.direction == 270) {
        if !(self.sprite_index == asset_get_index(self.chosenSprite + "Down")) {
            self.sprite_index = asset_get_index(self.chosenSprite + "Down")
        }
    }
}

//player is walking
if !(self.running) and !(self.standing) {
    if (self.direction == 0) {
        if !(self.sprite_index == asset_get_index(self.chosenSprite + "RightWalking")) {
            self.sprite_index = asset_get_index(self.chosenSprite + "RightWalking")
        }
    }
    else if (self.direction == 90) {
        if !(self.sprite_index == asset_get_index(self.chosenSprite + "UpWalking")) {
            self.sprite_index = asset_get_index(self.chosenSprite + "UpWalking")
        }
    }
    else if (self.direction == 180) {
        if !(self.sprite_index == asset_get_index(self.chosenSprite + "LeftWalking")) {
            self.sprite_index = asset_get_index(self.chosenSprite + "LeftWalking")
        }
    }
    else if (self.direction == 270) {
        if !(self.sprite_index == asset_get_index(self.chosenSprite + "DownWalking")) {
            self.sprite_index = asset_get_index(self.chosenSprite + "DownWalking")
        }
    }
}

//player is running
if (self.running) and !(self.standing) {
    if (self.direction == 0) {
        if !(self.sprite_index == asset_get_index(self.chosenSprite + "RightRunning")) {
            self.sprite_index = asset_get_index(self.chosenSprite + "RightRunning")
        }
    }
    else if (self.direction == 90) {
        if !(self.sprite_index == asset_get_index(self.chosenSprite + "UpRunning")) {
            self.sprite_index = asset_get_index(self.chosenSprite + "UpRunning")
        }
    }
    else if (self.direction == 180) {
        if !(self.sprite_index == asset_get_index(self.chosenSprite + "LeftRunning")) {
            self.sprite_index = asset_get_index(self.chosenSprite + "LeftRunning")
        }
    }
    else if (self.direction == 270) {
        if !(self.sprite_index == asset_get_index(self.chosenSprite + "DownRunning")) {
            self.sprite_index = asset_get_index(self.chosenSprite + "DownRunning")
        }
    }
}

//-------------------------Other Controls----------------------------
if (keyboard_check_released(vk_escape)) and !(instance_exists(igMenuObj)) and !(chatBox.takeInput) {
    global.pause = true
    instance_create(playerObj.x, playerObj.y, igMenuObj)
}

//--------------------------Chat Box---------------------------------
if !(global.pause) {
    keyboard_string = ""
}
//start entering chat
if (keyboard_check_pressed(vk_enter)) and !(global.pause) and !(instance_exists(igMenuObj)){
    global.pause = true
    chatBox.takeInput = true
    chatBox.clearKeyString = true
}
else if (keyboard_check_pressed(vk_enter)) and (global.pause) and !(instance_exists(igMenuObj)){
    global.pause = false
    chatBox.takeInput = false
    //start to send string
    if (instance_exists(serverObj)) {
    //if this is the server
        buffer_seek(serverObj.buffer, buffer_seek_start, 0)
        
        buffer_write(serverObj.buffer, buffer_u8, 3)
        buffer_write(serverObj.buffer, buffer_string, keyboard_string)
        
        network_send_packet(serverObj.socket, serverObj.buffer, buffer_tell(serverObj.buffer))
    }
    else if (instance_exists(clientObj)) {
        //if this is the client
        buffer_seek(clientObj.buffer, buffer_seek_start, 0)
        
        buffer_write(clientObj.buffer, buffer_u8, 3)
        buffer_write(clientObj.buffer, buffer_string, keyboard_string)
        
        network_send_packet(clientObj.socket, clientObj.buffer, buffer_tell(clientObj.buffer))
    }
}
//=============================================================
if !(global.pause) {
    if (keyboard_check_pressed(vk_f2)) {
        bellossomArray[0, 0] = "Bellossom"
        bellossomArray[0, 1] = 1
        bellossomArray[0, 2] = 75
        bellossomArray[0, 3] = ( (bellossomArray[@ 0, 2] * 2) * (bellossomArray[@ 0, 1] / 100) + 10 + bellossomArray[@ 0, 1] )
        bellossomArray[0, 4] = 80
        bellossomArray[0, 5] = 95
        bellossomArray[0, 6] = 50
        bellossomArray[0, 7] = 90
        bellossomArray[0, 8] = 100
        bellossomArray[0, 9] = "Grass"
        bellossomArray[0, 10] = "Tackle"
        bellossomArray[0, 11] = "Headbutt"
        bellossomArray[0, 12] = "Yo Mama Joke"
        bellossomArray[0, 13] = "Falcon Punch"
        bellossomArray[0, 14] = 0
        bellossomArray[0, 15] = bellossomArray[@ 0, 3]
        bellossomArray[0, 16] = 0
        scr_addPokemon(bellossomArray, playerObj.numOfPokemon)
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///-----------------------------Collisions----------------------------
//collision to the right
if (place_meeting(self.x + speed, self.y, wallObj)) {
    self.x -= speed
}
//collision up
if (place_meeting(self.x, self.y - speed, wallObj)) {
    self.y += speed
}
//collision to the left
if (place_meeting(self.x - speed, self.y, wallObj)) {
    self.x += speed
}
//collision down
if (place_meeting(self.x, self.y + speed, wallObj)) {
    self.y -= speed
}


//-----------Collision with item ball------------------------
//collision to the right
if (place_meeting(self.x + speed, self.y, itemObj)) {
    self.x -= speed
}
//collision up
if (place_meeting(self.x, self.y - speed, itemObj)) {
    self.y += speed
}
//collision to the left
if (place_meeting(self.x - speed, self.y, itemObj)) {
    self.x += speed
}
//collision down
if (place_meeting(self.x, self.y + speed, itemObj)) {
    self.y -= speed
}

//-----------Collision with trees------------------------
//collision to the right
if (place_meeting(self.x + speed, self.y, treeObject)) || (place_meeting(self.x + speed, self.y, treeObject_top)) {
    self.x -= speed
}
//collision up
if (place_meeting(self.x, self.y - speed, treeObject)) || (place_meeting(self.x, self.y - speed, treeObject_top)) {
    self.y += speed
}
//collision to the left
if (place_meeting(self.x - speed, self.y, treeObject)) || (place_meeting(self.x - speed, self.y, treeObject_top)) {
    self.x += speed
}
//collision down
if (place_meeting(self.x, self.y + speed, treeObject)) || (place_meeting(self.x, self.y + speed, treeObject_top)) {
    self.y -= speed
}

//-----------Collision with other Player------------------------
if (instance_exists(playerOther)) {
    //collision to the right
    if (place_meeting(self.x + speed, self.y, playerOther)) {
        self.x -= speed
    }
    //collision up
    if (place_meeting(self.x, self.y - speed, playerOther)) {
        self.y += speed
    }
    //collision to the left
    if (place_meeting(self.x - speed, self.y, playerOther)) {
        self.x += speed
    }
    //collision down
    if (place_meeting(self.x, self.y + speed, playerOther)) {
        self.y -= speed
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///send position and animation
//check if server or if client
self.animation = sprite_get_name(sprite_index)
if (instance_exists(serverObj)) {
    //if this is the server
    buffer_seek(serverObj.buffer, buffer_seek_start, 0)
    
    buffer_write(serverObj.buffer, buffer_u8, 2)
    buffer_write(serverObj.buffer, buffer_u32, self.x)
    buffer_write(serverObj.buffer, buffer_u32, self.y)
    buffer_write(serverObj.buffer, buffer_string, self.animation)
    
    network_send_packet(serverObj.socket, serverObj.buffer, buffer_tell(serverObj.buffer))
}
else if (instance_exists(clientObj)) {
    //if this is the client
    buffer_seek(clientObj.buffer, buffer_seek_start, 0)
    
    buffer_write(clientObj.buffer, buffer_u8, 2)
    buffer_write(clientObj.buffer, buffer_u32, self.x)
    buffer_write(clientObj.buffer, buffer_u32, self.y)
    buffer_write(clientObj.buffer, buffer_string, self.animation)
    
    network_send_packet(clientObj.socket, clientObj.buffer, buffer_tell(clientObj.buffer))
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for need to send pokemonNames
if (self.getPokemonNames) {
    
    //send up to the first six id's in playerObj.pokemonArray
    if (instance_exists(serverObj)) {
        //if this is the server
        buffer_seek(serverObj.buffer, buffer_seek_start, 0)
        
        buffer_write(serverObj.buffer, buffer_u8, 6)
        var maxCheck = 6
        if (playerObj.numOfPokemon &gt; maxCheck) {
            buffer_write(serverObj.buffer, buffer_u8, maxCheck)
            for (var i = 0; i &lt; maxCheck; i++) {
                buffer_write(serverObj.buffer, buffer_string, playerObj.pokemonArray[i, 0])
                if (i == 5) {
                    break
                }
            } 
        } else {
            buffer_write(serverObj.buffer, buffer_u8, playerObj.numOfPokemon)
            for (var i = 0; i &lt; playerObj.numOfPokemon; i++) {
                buffer_write(serverObj.buffer, buffer_string, playerObj.pokemonArray[i, 0])
                if (i == 5) {
                    break
                }
            }
        }
        
        network_send_packet(serverObj.socket, serverObj.buffer, buffer_tell(serverObj.buffer))
    }
    else if (instance_exists(clientObj)) {
        //if this is the client
        buffer_seek(clientObj.buffer, buffer_seek_start, 0)
        
        buffer_write(clientObj.buffer, buffer_u8, 6)
        var maxCheck = 6
        if (playerObj.numOfPokemon &gt; maxCheck) {
            buffer_write(clientObj.buffer, buffer_u8, maxCheck)
            for (var i = 0; i &lt; maxCheck; i++) {
                buffer_write(clientObj.buffer, buffer_string, playerObj.pokemonArray[i, 0])
                if (i == 5) {
                    break
                }
            }
        } else {
            buffer_write(clientObj.buffer, buffer_u8, playerObj.numOfPokemon)
            for (var i = 0; i &lt; playerObj.numOfPokemon; i++) {
                buffer_write(clientObj.buffer, buffer_string, playerObj.pokemonArray[i, 0])
                if (i == 5) {
                    break
                }
            }
        }
        network_send_packet(clientObj.socket, clientObj.buffer, buffer_tell(clientObj.buffer))
    }
    
    //reset flag
    self.getPokemonNames = false
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sound

if !running &amp;&amp; !standing {
    if !audio_is_playing(grassWalking){
        audio_play_sound(grassWalking,1,false)}}
if standing {
    audio_stop_sound(grassWalking)
    audio_stop_sound(grassRunning)}
if !standing {
    if !audio_is_playing(grassRunning) {
        audio_play_sound(grassRunning,1,false)}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(sprite_index, all, self.x, self.y)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
