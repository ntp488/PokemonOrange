<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>moveButtonSprite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -800
str = ""
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Send pokemon's attack and level to other player so they can calculate damage
playerBattleObj.myTurnEnd = true
var levelStat = playerObj.pokemonArray[@ playerBattleObj.currentPokemon, 1]
var baseAttackStat = playerObj.pokemonArray[@ playerBattleObj.currentPokemon, 4]
var workingAttackStat = (baseAttackStat * 2) * levelStat / 100 + 5
var playerTurnEnd = true
if (instance_exists(serverObj)) {
    //if this is the server
    buffer_seek(serverObj.buffer, buffer_seek_start, 0)
    
    buffer_write(serverObj.buffer, buffer_u8, 9)
    buffer_write(serverObj.buffer, buffer_u8, levelStat)
    buffer_write(serverObj.buffer, buffer_u8, baseAttackStat)
    buffer_write(serverObj.buffer, buffer_u8, workingAttackStat)
    
    network_send_packet(serverObj.socket, serverObj.buffer, buffer_tell(serverObj.buffer))
}
else if (instance_exists(clientObj)) {
    //if this is the client
    buffer_seek(clientObj.buffer, buffer_seek_start, 0)
    
    buffer_write(clientObj.buffer, buffer_u8, 9)
    buffer_write(clientObj.buffer, buffer_u8, levelStat)
    buffer_write(clientObj.buffer, buffer_u8, baseAttackStat)
    buffer_write(clientObj.buffer, buffer_u8, workingAttackStat)
    
    network_send_packet(clientObj.socket, clientObj.buffer, buffer_tell(clientObj.buffer))
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()
draw_set_font(mode7Font)
draw_set_halign(fa_center)
draw_set_valign(fa_middle)
draw_text(self.x, self.y, self.str)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
