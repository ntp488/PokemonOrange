<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize server object
var type = network_socket_tcp
var port = netScript_Client_SetPort()
max_clients = 32
server = network_create_server(type, port, max_clients)
socket_list = ds_list_create()
clientDataArray = ds_grid_create(1, 3)

if (server &lt; 0) {
    show_message("Failed to create the server!")
    game_restart()
}

var size = 1024
var bufferType = buffer_grow
var alignment = 1
buffer = buffer_create(size, type, alignment)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Write ds_grid and send to all clients - check for escape
if (keyboard_check_released(vk_escape)) {
    game_end()
}
for (var i = 0; i &lt; ds_grid_width(self.clientDataArray); i++) {
    buffer_seek(self.buffer, buffer_seek_start, 0)
    
    buffer_write(self.buffer, buffer_u8, 1)
    buffer_write(self.buffer, buffer_string, ds_grid_write(self.clientDataArray))
    
    network_send_packet(ds_grid_get(self.clientDataArray, i, 0), self.buffer, buffer_tell(self.buffer))
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for clients and data
var type_event = async_load[? "type"]
switch type_event {
    case network_type_connect:
        //add client to socket list
        var socketid = async_load[? "socket"]
        ds_list_add(self.socket_list, socketid)
        //check if client data array needs to add room for new client
        var gridWidth = ds_grid_width(self.clientDataArray)
        var gridHeight = ds_grid_height(self.clientDataArray)
        if (ds_list_size(self.socket_list) &gt; gridWidth) {
            ds_grid_resize(self.clientDataArray, gridWidth + 1, gridHeight)
        }
        //add new client socketid to end of data array in first y position
        ds_grid_add(self.clientDataArray, ds_grid_width(self.clientDataArray) - 1, 0, socketid)
        break
    case network_type_disconnect:
        //remove the client from the socket variable
        var socketid = async_load[? "socket"]
        var socketNum = ds_list_find_index(self.socket_list, socketid)
        ds_list_delete(self.socket_list, socketNum)
        break
    case network_type_data:
        //handle the data
        var buff = async_load[? "buffer"]
        var socketid = async_load[? "socket"]
        buffer_seek(buff, buffer_seek_start, 0)
        netScript_ReceivedPacket(buff, socketid)
        break
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy server and socket list
network_destroy(self.server)
ds_list_destroy(self.socket_list)
ds_grid_destroy(clientDataArray)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(self.x, self.y, string(ds_list_size(self.socket_list))) //ouput number of connected sockets
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
